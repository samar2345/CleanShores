// // This slice will manage all authentication-related state and actions.

import { createSlice } from '@reduxjs/toolkit';

// Define the initial state for the authentication slice.
const initialState = {
    authStatus: false, // Boolean indicating if a user is currently logged in.
    userData: null,    // Stores the authenticated user's data object (e.g., { _id, username, email, role, etc. }).
    isLoading: true,   // A global loading flag, useful for showing a spinner while the app is initializing or checking auth status.
};

const authSlice = createSlice({
    name: 'auth', // This name is used as the key for this slice in the Redux store's state (e.g., state.auth).
    initialState, // The initial state for this slice.
    reducers: {
        // Reducer functions directly update the state based on dispatched actions.
        // Redux Toolkit uses Immer internally, allowing "mutable"-looking logic that is actually immutable under the hood.
        
        /**
         * Action dispatched upon successful user login.
         * Sets `authStatus` to true and stores the received user data.
         * @param {object} state - The current state of the auth slice.
         * @param {object} action - The dispatched action. `action.payload` should be the user data object.
         */
        login: (state, action) => { // Updated: action.payload is the user object directly
            state.authStatus = true;
            state.userData = action.payload; // Direct assignment of payload
        },

        /**
         * Action dispatched upon user logout.
         * Resets `authStatus` to false and clears user data.
         * @param {object} state - The current state of the auth slice.
         */
        logout: (state) => {
            state.authStatus = false;
            state.userData = null;
        },

        /**
         * Action to set or clear the global loading state for the app's initial authentication check.
         * @param {object} state - The current state of the auth slice.
         * @param {boolean} action.payload - True to set loading, false to clear.
         */
        setLoading: (state, action) => {
            state.isLoading = action.payload;
        },
        // You can add more specific actions later, e.g., `updateProfile(state, action)` to update user data in Redux.
    },
});

// Export individual action creators generated by `createSlice`.
// Components will import and dispatch these actions (e.g., `dispatch(login(userData))`).
export const { login, logout, setLoading } = authSlice.actions;

// Export the reducer function for this slice.
// It will be combined with other reducers in the main Redux store (in `store.js`).
export default authSlice.reducer;